- Les namespace
a == ::a

namepace foo{
	int a = 1;
	int b = 2;
	int c = 3;
}
foo::a

--------------------------------------------------------------------------------

- stdio stream

#include <iostream>
cout -> STDOUT
cin -> STDIN

std::cout << "Hello world!" << std::endl;

char buff[256];
std::cout << "input a word: ";
std::cin >> buff;
std::cout << "You entered " << buff << std::endl

--------------------------------------------------------------------------------

- Classes

//declaration 
class Myclass{

public:
	Myclass(void); //--> constructeur
	~Myclass(void);	//--> destructeur
};

//instanciation
Myclass::Myclass(void){
	std::cout << "Constructor called" << std::endl;
}

Myclass::~Myclass(void){
	std::cout << "Destructor called" << std::endl;
}

int main()
{
	MyClass instance;//constrcteur est appele automatiquement quand la var est declare

	return (0);//destructeur est appele automatiquement a la fin de la fonction (scope) ou la var est declare

}
--------------------------------------------------------------------------------

- Attribut et fonctions membres

//declaration de classe et des attributs et fonctions membres
class Myclass{

public:
	Myclass(void); //--> constructeur
	~Myclass(void);	//--> destructeur

	int		foo; //--> attribut membre
	void	bar(void); //--> fonction membre
};

//instanciation de la fonction membre
void	Myclass::bar(void) //prends toujours un param cache --> pointeur sur instance courante
{
	std::cout << "fonction member bar called" << std::endl;
}

--------------------------------------------------------------------------------

- this

Myclass::Myclass(void){
	std::cout << "Constructor called" << std::endl;

	//this pointe sur l'instance courante, 
	//ici c'est un pointeur sur la classe MyClass
	this->foo = 42;
	std::cout << "foo = " << this->foo << std::endl;

	//On appelle la fonction bar de MyClass
	this->bar();

}


--------------------------------------------------------------------------------

- Comparaison

On peut comparer 2 nstances de la meme class en creant une fonction membre.

--------------------------------------------------------------------------------

Non member attributes and non member functions

- attribut et fonction d'instance (= membre)

				VS 
-attribut et fonction de classe (= non membre)

classe-->static 
Ex: static int _nb_instance 
--> donne nombre de fois que instance de cette classe a ete cree
--> PAS POSSIBLE DE FIRE APPEL au pointeur THIS
--> Pour l'appeler: Myclass::_nb_instance
--> init dans le .CPP de la classe en dehors de toute fonction: int Myclass::_nb_instance = 0;

Pointeur
Pointeur sur fonction
NEW Pointeur sur membre
NEW Pointeur sur fonction membre

Myclass	instance1;
int Myclass::*p = NULL; --> pointur sur entier membre de Myclass
p = &Myclass::foo; --> Je ne sais pas de quel instance je parle -> on utilise .* ou ->* pour preciser l'instance
instance1.*p = 21; --> assigne 21 a foo de instance1

Myclass	*instance_pointeur = &instance1;
instance_pointeur->*p = 21; --> assigne 21 a foo de instance1 nen passant par le pointeur instance_pointeur


fonction de classe peut etre apele sans abvoir besoin d'instance
--------------------------------------------------------------------------------
